/*
 * generated by Xtext 2.22.0
 */
package org.xtext.example.uidsl.tests

import com.google.inject.Inject
import com.google.inject.Provider
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.resource.XtextResource
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.example.uidsl.tests.helper.SmartParseHelper

import static org.junit.Assert.assertNotNull
import static org.junit.Assert.assertTrue
import static org.junit.Assert.assertFalse

@RunWith(XtextRunner)
@InjectWith(UiDslInjectorProvider)
class UiDslParsingTest {

	@Inject extension SmartParseHelper

	@Inject Provider<XtextResourceSet> resourceSetProvider

	@Test
	def void loadModel() {
		val rs = resourceSetProvider.get
		val model = '''model Account'''.parse(rs, "model")
		assertNotNull(model)

		val uiModel = '''ui AccountUi for Account'''.parse(rs, "ui")
		assertNotNull(uiModel)

		EcoreUtil.resolveAll(rs)
		assertTrue((uiModel.eResource as XtextResource).errors.isEmpty)
	}

	@Test
	def void loadModelWithErrors() {
		val rs = resourceSetProvider.get
		val model = '''model Account'''.parse(rs, "model")
		assertNotNull(model)

		val uiModel = '''ui AccountUi for NoAccount'''.parse(rs, "ui") // Model with name NoAccount is not defined
		assertNotNull(uiModel)

		EcoreUtil.resolveAll(rs)
		assertFalse((uiModel.eResource as XtextResource).errors.isEmpty)
	}
}
