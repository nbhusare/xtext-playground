/*
 * generated by Xtext 2.22.0
 */
package org.xtext.example.uidsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.uidsl.services.UiDslGrammarAccess;
import org.xtext.example.uidsl.uiDsl.UiDslPackage;
import org.xtext.example.uidsl.uiDsl.UiModel;
import org.xtext.example.uidsl.uiDsl.UiModelFile;

@SuppressWarnings("all")
public class UiDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UiDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UiDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UiDslPackage.UI_MODEL:
				sequence_UiModel(context, (UiModel) semanticObject); 
				return; 
			case UiDslPackage.UI_MODEL_FILE:
				sequence_UiModelFile(context, (UiModelFile) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     UiModelFile returns UiModelFile
	 *
	 * Constraint:
	 *     uiModels+=UiModel+
	 */
	protected void sequence_UiModelFile(ISerializationContext context, UiModelFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UiModel returns UiModel
	 *
	 * Constraint:
	 *     (name=ID model=[Model|ID])
	 */
	protected void sequence_UiModel(ISerializationContext context, UiModel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UiDslPackage.Literals.UI_MODEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UiDslPackage.Literals.UI_MODEL__NAME));
			if (transientValues.isValueTransient(semanticObject, UiDslPackage.Literals.UI_MODEL__MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UiDslPackage.Literals.UI_MODEL__MODEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUiModelAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getUiModelAccess().getModelModelIDTerminalRuleCall_3_0_1(), semanticObject.eGet(UiDslPackage.Literals.UI_MODEL__MODEL, false));
		feeder.finish();
	}
	
	
}
