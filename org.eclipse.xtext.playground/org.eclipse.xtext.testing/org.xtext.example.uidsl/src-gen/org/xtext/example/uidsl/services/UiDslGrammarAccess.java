/*
 * generated by Xtext 2.22.0
 */
package org.xtext.example.uidsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UiDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class UiModelFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.uidsl.UiDsl.UiModelFile");
		private final Assignment cUiModelsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUiModelsUiModelParserRuleCall_0 = (RuleCall)cUiModelsAssignment.eContents().get(0);
		
		//UiModelFile:
		//	uiModels+=UiModel*;
		@Override public ParserRule getRule() { return rule; }
		
		//uiModels+=UiModel*
		public Assignment getUiModelsAssignment() { return cUiModelsAssignment; }
		
		//UiModel
		public RuleCall getUiModelsUiModelParserRuleCall_0() { return cUiModelsUiModelParserRuleCall_0; }
	}
	public class UiModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.uidsl.UiDsl.UiModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUiKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cModelModelCrossReference_3_0 = (CrossReference)cModelAssignment_3.eContents().get(0);
		private final RuleCall cModelModelIDTerminalRuleCall_3_0_1 = (RuleCall)cModelModelCrossReference_3_0.eContents().get(1);
		
		//UiModel:
		//	'ui' name=ID 'for' model=[modelDsl::Model];
		@Override public ParserRule getRule() { return rule; }
		
		//'ui' name=ID 'for' model=[modelDsl::Model]
		public Group getGroup() { return cGroup; }
		
		//'ui'
		public Keyword getUiKeyword_0() { return cUiKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'for'
		public Keyword getForKeyword_2() { return cForKeyword_2; }
		
		//model=[modelDsl::Model]
		public Assignment getModelAssignment_3() { return cModelAssignment_3; }
		
		//[modelDsl::Model]
		public CrossReference getModelModelCrossReference_3_0() { return cModelModelCrossReference_3_0; }
		
		//ID
		public RuleCall getModelModelIDTerminalRuleCall_3_0_1() { return cModelModelIDTerminalRuleCall_3_0_1; }
	}
	
	
	private final UiModelFileElements pUiModelFile;
	private final UiModelElements pUiModel;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UiDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUiModelFile = new UiModelFileElements();
		this.pUiModel = new UiModelElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.uidsl.UiDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UiModelFile:
	//	uiModels+=UiModel*;
	public UiModelFileElements getUiModelFileAccess() {
		return pUiModelFile;
	}
	
	public ParserRule getUiModelFileRule() {
		return getUiModelFileAccess().getRule();
	}
	
	//UiModel:
	//	'ui' name=ID 'for' model=[modelDsl::Model];
	public UiModelElements getUiModelAccess() {
		return pUiModel;
	}
	
	public ParserRule getUiModelRule() {
		return getUiModelAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
